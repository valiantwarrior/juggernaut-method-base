package kr.valor.juggernaut.data.session.mapper.delegate.routinesprovider

import kr.valor.juggernaut.common.Phase
import kr.valor.juggernaut.data.session.mapper.delegate.routinesprovider.amrap.AMRAPRoutinesProviderDelegate
import kr.valor.juggernaut.data.session.mapper.delegate.routinesprovider.deload.BasicDeloadRoutinesProviderDelegate
import kr.valor.juggernaut.domain.session.model.AmrapSession
import kr.valor.juggernaut.domain.session.model.DeloadSession
import org.hamcrest.CoreMatchers.`is`
import org.hamcrest.MatcherAssert.assertThat

fun AMRAPRoutinesProviderDelegate.`validate AMRAP routines that were generated by delegate`(table: PhaseEntireRoutineIntensityTable, action: (Double) -> Double) {
    Phase.values().forEach { phase ->
        val tm = 60.0
        val sessionRoutines = provideRoutines(phase, tm)
        val routines = sessionRoutines.warmupRoutines + sessionRoutines.amrapRoutine

        routines.forEachIndexed { index, (weights, reps) ->
            val routineIntensityTable = table[phase]!!
            val (repetitions, intensity) = routineIntensityTable[index]

            assertThat(weights, `is`(action(tm * intensity)))
            assertThat(reps, `is`(repetitions))
        }
    }
}

fun BasicDeloadRoutinesProviderDelegate.`validate Deload routines that were generated by delegate`(table: PhaseEntireRoutineIntensityTable, action: (Double) -> Double) {
    Phase.values().forEach { phase ->
        val tm = 60.0
        val sessionRoutines = provideRoutines(phase, tm)
        val routines = sessionRoutines.routines

        routines.forEachIndexed { index, (weights, reps) ->
            val routineIntensityTable = table[phase]!!
            val (repetitions, intensity) = routineIntensityTable[index]

            assertThat(weights, `is`(action(tm * intensity)))
            assertThat(reps, `is`(repetitions))
        }
    }
}
